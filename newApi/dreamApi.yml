swagger: '2.0'
info:
  version: 1.0.0
  title: newApi
basePath: /api
paths:
  '/Users/{id}/accessTokens/{fk}':
    get:
      tags:
        - User
      summary: Find a related item by id for accessTokens.
      operationId: User.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Delete a related item by id for accessTokens.
      operationId: User.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - User
      summary: Update a related item by id for accessTokens.
      operationId: User.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Users/{id}/accessTokens':
    get:
      tags:
        - User
      summary: Queries accessTokens of User.
      operationId: User.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - User
      summary: Creates a new instance in accessTokens of this model.
      operationId: User.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - User
      summary: Deletes all accessTokens of this model.
      operationId: User.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/accessTokens/count':
    get:
      tags:
        - User
      summary: Counts accessTokens of User.
      operationId: User.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users:
    post:
      tags:
        - User
      summary: Create a new instance of the model and persist it into the data source.
      operationId: User.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: User.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__put_Users
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    get:
      tags:
        - User
      summary: Find all instances of the model matched by filter from the data source.
      operationId: User.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
      deprecated: false
  /Users/replaceOrCreate:
    post:
      tags:
        - User
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: User.replaceOrCreate__post_Users_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/upsertWithWhere:
    post:
      tags:
        - User
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: User.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/exists':
    get:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__get_Users_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Users/{id}':
    head:
      tags:
        - User
      summary: Check whether a model instance exists in the data source.
      operationId: 'User.exists__head_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - User
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: User.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    put:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__put_Users_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
    delete:
      tags:
        - User
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: User.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - User
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: User.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  '/Users/{id}/replace':
    post:
      tags:
        - User
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'User.replaceById__post_Users_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/findOne:
    get:
      tags:
        - User
      summary: Find first instance of the model matched by filter from the data source.
      operationId: User.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/User'
      deprecated: false
  /Users/update:
    post:
      tags:
        - User
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: User.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/User'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Users/count:
    get:
      tags:
        - User
      summary: Count instances of the model matched by where from the data source.
      operationId: User.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Users/change-stream:
    post:
      tags:
        - User
      summary: Create a change stream.
      operationId: User.createChangeStream__post_Users_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - User
      summary: Create a change stream.
      operationId: User.createChangeStream__get_Users_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Users/login:
    post:
      tags:
        - User
      summary: Login a user with username/email and password.
      operationId: User.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Users/logout:
    post:
      tags:
        - User
      summary: Logout a user with access token.
      operationId: User.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Users/{id}/verify':
    post:
      tags:
        - User
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: User.prototype.verify
      parameters:
        - name: id
          in: path
          description: User id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/confirm:
    get:
      tags:
        - User
      summary: Confirm a user registration with identity verification token.
      operationId: User.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset:
    post:
      tags:
        - User
      summary: Reset password for a user with email.
      operationId: User.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/change-password:
    post:
      tags:
        - User
      summary: Change a user's password.
      operationId: User.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Users/reset-password:
    post:
      tags:
        - User
      summary: Reset user's password via a password-reset token.
      operationId: User.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RunningGames/{id}/gameGroups/{fk}':
    get:
      tags:
        - RunningGame
      summary: Find a related item by id for gameGroups.
      operationId: RunningGame.prototype.__findById__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Delete a related item by id for gameGroups.
      operationId: RunningGame.prototype.__destroyById__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: Update a related item by id for gameGroups.
      operationId: RunningGame.prototype.__updateById__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  '/RunningGames/{id}/members/{fk}':
    get:
      tags:
        - RunningGame
      summary: Find a related item by id for members.
      operationId: RunningGame.prototype.__findById__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Delete a related item by id for members.
      operationId: RunningGame.prototype.__destroyById__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: Update a related item by id for members.
      operationId: RunningGame.prototype.__updateById__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/RunningGames/{id}/answerLists/{fk}':
    get:
      tags:
        - RunningGame
      summary: Find a related item by id for answerLists.
      operationId: RunningGame.prototype.__findById__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Delete a related item by id for answerLists.
      operationId: RunningGame.prototype.__destroyById__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: Update a related item by id for answerLists.
      operationId: RunningGame.prototype.__updateById__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/RunningGames/{id}/game':
    get:
      tags:
        - RunningGame
      summary: Fetches belongsTo relation game.
      operationId: RunningGame.prototype.__get__game
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/RunningGames/{id}/stage':
    get:
      tags:
        - RunningGame
      summary: Fetches hasOne relation stage.
      operationId: RunningGame.prototype.__get__stage
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    post:
      tags:
        - RunningGame
      summary: Creates a new instance in stage of this model.
      operationId: RunningGame.prototype.__create__stage
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: Update stage of this model.
      operationId: RunningGame.prototype.__update__stage
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Deletes stage of this model.
      operationId: RunningGame.prototype.__destroy__stage
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RunningGames/{id}/gameGroups':
    get:
      tags:
        - RunningGame
      summary: Queries gameGroups of RunningGame.
      operationId: RunningGame.prototype.__get__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameGroup'
      deprecated: false
    post:
      tags:
        - RunningGame
      summary: Creates a new instance in gameGroups of this model.
      operationId: RunningGame.prototype.__create__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Deletes all gameGroups of this model.
      operationId: RunningGame.prototype.__delete__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RunningGames/{id}/gameGroups/count':
    get:
      tags:
        - RunningGame
      summary: Counts gameGroups of RunningGame.
      operationId: RunningGame.prototype.__count__gameGroups
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/RunningGames/{id}/members':
    get:
      tags:
        - RunningGame
      summary: Queries members of RunningGame.
      operationId: RunningGame.prototype.__get__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
    post:
      tags:
        - RunningGame
      summary: Creates a new instance in members of this model.
      operationId: RunningGame.prototype.__create__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Deletes all members of this model.
      operationId: RunningGame.prototype.__delete__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RunningGames/{id}/members/count':
    get:
      tags:
        - RunningGame
      summary: Counts members of RunningGame.
      operationId: RunningGame.prototype.__count__members
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/RunningGames/{id}/answerLists':
    get:
      tags:
        - RunningGame
      summary: Queries answerLists of RunningGame.
      operationId: RunningGame.prototype.__get__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AnswerList'
      deprecated: false
    post:
      tags:
        - RunningGame
      summary: Creates a new instance in answerLists of this model.
      operationId: RunningGame.prototype.__create__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: Deletes all answerLists of this model.
      operationId: RunningGame.prototype.__delete__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/RunningGames/{id}/answerLists/count':
    get:
      tags:
        - RunningGame
      summary: Counts answerLists of RunningGame.
      operationId: RunningGame.prototype.__count__answerLists
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /RunningGames:
    post:
      tags:
        - RunningGame
      summary: Create a new instance of the model and persist it into the data source.
      operationId: RunningGame.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    patch:
      tags:
        - RunningGame
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: RunningGame.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RunningGame.replaceOrCreate__put_RunningGames
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    get:
      tags:
        - RunningGame
      summary: Find all instances of the model matched by filter from the data source.
      operationId: RunningGame.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RunningGame'
      deprecated: false
  /RunningGames/replaceOrCreate:
    post:
      tags:
        - RunningGame
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: RunningGame.replaceOrCreate__post_RunningGames_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  /RunningGames/upsertWithWhere:
    post:
      tags:
        - RunningGame
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: RunningGame.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/RunningGames/{id}/exists':
    get:
      tags:
        - RunningGame
      summary: Check whether a model instance exists in the data source.
      operationId: 'RunningGame.exists__get_RunningGames_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/RunningGames/{id}':
    head:
      tags:
        - RunningGame
      summary: Check whether a model instance exists in the data source.
      operationId: 'RunningGame.exists__head_RunningGames_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - RunningGame
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: RunningGame.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    put:
      tags:
        - RunningGame
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RunningGame.replaceById__put_RunningGames_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    delete:
      tags:
        - RunningGame
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: RunningGame.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - RunningGame
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: RunningGame.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: RunningGame id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/RunningGames/{id}/replace':
    post:
      tags:
        - RunningGame
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'RunningGame.replaceById__post_RunningGames_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  /RunningGames/findOne:
    get:
      tags:
        - RunningGame
      summary: Find first instance of the model matched by filter from the data source.
      operationId: RunningGame.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  /RunningGames/update:
    post:
      tags:
        - RunningGame
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: RunningGame.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /RunningGames/count:
    get:
      tags:
        - RunningGame
      summary: Count instances of the model matched by where from the data source.
      operationId: RunningGame.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /RunningGames/change-stream:
    post:
      tags:
        - RunningGame
      summary: Create a change stream.
      operationId: RunningGame.createChangeStream__post_RunningGames_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - RunningGame
      summary: Create a change stream.
      operationId: RunningGame.createChangeStream__get_RunningGames_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/GameGroups/{id}/runningGame':
    get:
      tags:
        - GameGroup
      summary: Fetches belongsTo relation runningGame.
      operationId: GameGroup.prototype.__get__runningGame
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/GameGroups/{id}/members/{fk}':
    get:
      tags:
        - GameGroup
      summary: Find a related item by id for members.
      operationId: GameGroup.prototype.__findById__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - GameGroup
      summary: Delete a related item by id for members.
      operationId: GameGroup.prototype.__destroyById__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - GameGroup
      summary: Update a related item by id for members.
      operationId: GameGroup.prototype.__updateById__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/GameGroups/{id}/members':
    get:
      tags:
        - GameGroup
      summary: Queries members of GameGroup.
      operationId: GameGroup.prototype.__get__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
    post:
      tags:
        - GameGroup
      summary: Creates a new instance in members of this model.
      operationId: GameGroup.prototype.__create__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - GameGroup
      summary: Deletes all members of this model.
      operationId: GameGroup.prototype.__delete__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/GameGroups/{id}/members/count':
    get:
      tags:
        - GameGroup
      summary: Counts members of GameGroup.
      operationId: GameGroup.prototype.__count__members
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameGroups:
    post:
      tags:
        - GameGroup
      summary: Create a new instance of the model and persist it into the data source.
      operationId: GameGroup.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    patch:
      tags:
        - GameGroup
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: GameGroup.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    put:
      tags:
        - GameGroup
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GameGroup.replaceOrCreate__put_GameGroups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    get:
      tags:
        - GameGroup
      summary: Find all instances of the model matched by filter from the data source.
      operationId: GameGroup.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameGroup'
      deprecated: false
  /GameGroups/replaceOrCreate:
    post:
      tags:
        - GameGroup
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: GameGroup.replaceOrCreate__post_GameGroups_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  /GameGroups/upsertWithWhere:
    post:
      tags:
        - GameGroup
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: GameGroup.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  '/GameGroups/{id}/exists':
    get:
      tags:
        - GameGroup
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameGroup.exists__get_GameGroups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/GameGroups/{id}':
    head:
      tags:
        - GameGroup
      summary: Check whether a model instance exists in the data source.
      operationId: 'GameGroup.exists__head_GameGroups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - GameGroup
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: GameGroup.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    put:
      tags:
        - GameGroup
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GameGroup.replaceById__put_GameGroups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    delete:
      tags:
        - GameGroup
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: GameGroup.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - GameGroup
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: GameGroup.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: GameGroup id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  '/GameGroups/{id}/replace':
    post:
      tags:
        - GameGroup
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'GameGroup.replaceById__post_GameGroups_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  /GameGroups/findOne:
    get:
      tags:
        - GameGroup
      summary: Find first instance of the model matched by filter from the data source.
      operationId: GameGroup.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  /GameGroups/update:
    post:
      tags:
        - GameGroup
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: GameGroup.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /GameGroups/count:
    get:
      tags:
        - GameGroup
      summary: Count instances of the model matched by where from the data source.
      operationId: GameGroup.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /GameGroups/change-stream:
    post:
      tags:
        - GameGroup
      summary: Create a change stream.
      operationId: GameGroup.createChangeStream__post_GameGroups_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - GameGroup
      summary: Create a change stream.
      operationId: GameGroup.createChangeStream__get_GameGroups_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Members/{id}/accessTokens/{fk}':
    get:
      tags:
        - Member
      summary: Find a related item by id for accessTokens.
      operationId: Member.prototype.__findById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Delete a related item by id for accessTokens.
      operationId: Member.prototype.__destroyById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Member
      summary: Update a related item by id for accessTokens.
      operationId: Member.prototype.__updateById__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for accessTokens
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
  '/Members/{id}/runningGame':
    get:
      tags:
        - Member
      summary: Fetches belongsTo relation runningGame.
      operationId: Member.prototype.__get__runningGame
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/Members/{id}/gameGroup':
    get:
      tags:
        - Member
      summary: Fetches belongsTo relation gameGroup.
      operationId: Member.prototype.__get__gameGroup
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  '/Members/{id}/groups/{fk}':
    get:
      tags:
        - Member
      summary: Find a related item by id for groups.
      operationId: Member.prototype.__findById__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Delete a related item by id for groups.
      operationId: Member.prototype.__destroyById__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Member
      summary: Update a related item by id for groups.
      operationId: Member.prototype.__updateById__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for groups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Members/{id}/group':
    get:
      tags:
        - Member
      summary: Fetches belongsTo relation group.
      operationId: Member.prototype.__get__group
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Members/{id}/accessTokens':
    get:
      tags:
        - Member
      summary: Queries accessTokens of Member.
      operationId: Member.prototype.__get__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AccessToken'
      deprecated: false
    post:
      tags:
        - Member
      summary: Creates a new instance in accessTokens of this model.
      operationId: Member.prototype.__create__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AccessToken'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AccessToken'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Deletes all accessTokens of this model.
      operationId: Member.prototype.__delete__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/accessTokens/count':
    get:
      tags:
        - Member
      summary: Counts accessTokens of Member.
      operationId: Member.prototype.__count__accessTokens
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Members/{id}/groups':
    get:
      tags:
        - Member
      summary: Queries groups of Member.
      operationId: Member.prototype.__get__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
    post:
      tags:
        - Member
      summary: Creates a new instance in groups of this model.
      operationId: Member.prototype.__create__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Member
      summary: Deletes all groups of this model.
      operationId: Member.prototype.__delete__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/groups/count':
    get:
      tags:
        - Member
      summary: Counts groups of Member.
      operationId: Member.prototype.__count__groups
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members:
    post:
      tags:
        - Member
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Member.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    patch:
      tags:
        - Member
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Member.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Member.replaceOrCreate__put_Members
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    get:
      tags:
        - Member
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Member.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
  /Members/replaceOrCreate:
    post:
      tags:
        - Member
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Member.replaceOrCreate__post_Members_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/upsertWithWhere:
    post:
      tags:
        - Member
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Member.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/exists':
    get:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__get_Members_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Members/{id}':
    head:
      tags:
        - Member
      summary: Check whether a model instance exists in the data source.
      operationId: 'Member.exists__head_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Member
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Member.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    put:
      tags:
        - Member
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Member.replaceById__put_Members_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Member
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Member.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Member
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Member.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Members/{id}/replace':
    post:
      tags:
        - Member
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Member.replaceById__post_Members_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/findOne:
    get:
      tags:
        - Member
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Member.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  /Members/update:
    post:
      tags:
        - Member
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Member.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Members/count:
    get:
      tags:
        - Member
      summary: Count instances of the model matched by where from the data source.
      operationId: Member.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Members/change-stream:
    post:
      tags:
        - Member
      summary: Create a change stream.
      operationId: Member.createChangeStream__post_Members_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Member
      summary: Create a change stream.
      operationId: Member.createChangeStream__get_Members_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /Members/login:
    post:
      tags:
        - Member
      summary: Login a user with username/email and password.
      operationId: Member.login
      parameters:
        - name: credentials
          in: body
          required: true
          schema:
            type: object
        - name: include
          in: query
          description: >-
            Related objects to include in the response. See the description of
            return value for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            description: >+
              The response body contains properties of the AccessToken created
              on login.

              Depending on the value of `include` parameter, the body may
              contain additional properties:

                - `user` - `U+007BUserU+007D` - Data of the currently logged in user. (`include=user`)

            type: object
      deprecated: false
  /Members/logout:
    post:
      tags:
        - Member
      summary: Logout a user with access token.
      operationId: Member.logout
      parameters: []
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Members/{id}/verify':
    post:
      tags:
        - Member
      summary: Trigger user's identity verification with configured verifyOptions
      operationId: Member.prototype.verify
      parameters:
        - name: id
          in: path
          description: Member id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/confirm:
    get:
      tags:
        - Member
      summary: Confirm a user registration with identity verification token.
      operationId: Member.confirm
      parameters:
        - name: uid
          in: query
          required: true
          type: string
        - name: token
          in: query
          required: true
          type: string
        - name: redirect
          in: query
          required: false
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset:
    post:
      tags:
        - Member
      summary: Reset password for a user with email.
      operationId: Member.resetPassword
      parameters:
        - name: options
          in: body
          required: true
          schema:
            type: object
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/change-password:
    post:
      tags:
        - Member
      summary: Change a user's password.
      operationId: Member.changePassword
      parameters:
        - name: oldPassword
          in: formData
          required: true
          type: string
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /Members/reset-password:
    post:
      tags:
        - Member
      summary: Reset user's password via a password-reset token.
      operationId: Member.setPassword
      parameters:
        - name: newPassword
          in: formData
          required: true
          type: string
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Groups/{id}/runningGames':
    get:
      tags:
        - Group
      summary: Fetches hasOne relation runningGames.
      operationId: Group.prototype.__get__runningGames
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    post:
      tags:
        - Group
      summary: Creates a new instance in runningGames of this model.
      operationId: Group.prototype.__create__runningGames
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    put:
      tags:
        - Group
      summary: Update runningGames of this model.
      operationId: Group.prototype.__update__runningGames
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    delete:
      tags:
        - Group
      summary: Deletes runningGames of this model.
      operationId: Group.prototype.__destroy__runningGames
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Groups/{id}/member':
    get:
      tags:
        - Group
      summary: Fetches belongsTo relation member.
      operationId: Group.prototype.__get__member
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Groups/{id}/members/{fk}':
    get:
      tags:
        - Group
      summary: Find a related item by id for members.
      operationId: Group.prototype.__findById__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Group
      summary: Delete a related item by id for members.
      operationId: Group.prototype.__destroyById__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Group
      summary: Update a related item by id for members.
      operationId: Group.prototype.__updateById__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Groups/{id}/members':
    get:
      tags:
        - Group
      summary: Queries members of Group.
      operationId: Group.prototype.__get__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
    post:
      tags:
        - Group
      summary: Creates a new instance in members of this model.
      operationId: Group.prototype.__create__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Group
      summary: Deletes all members of this model.
      operationId: Group.prototype.__delete__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Groups/{id}/members/count':
    get:
      tags:
        - Group
      summary: Counts members of Group.
      operationId: Group.prototype.__count__members
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Groups:
    post:
      tags:
        - Group
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Group.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Group.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Group.replaceOrCreate__put_Groups
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    get:
      tags:
        - Group
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Group.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Group'
      deprecated: false
  /Groups/replaceOrCreate:
    post:
      tags:
        - Group
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Group.replaceOrCreate__post_Groups_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/upsertWithWhere:
    post:
      tags:
        - Group
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Group.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/exists':
    get:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__get_Groups_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Groups/{id}':
    head:
      tags:
        - Group
      summary: Check whether a model instance exists in the data source.
      operationId: 'Group.exists__head_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Group
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Group.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    put:
      tags:
        - Group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.replaceById__put_Groups_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
    delete:
      tags:
        - Group
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Group.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Group
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Group.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Group id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  '/Groups/{id}/replace':
    post:
      tags:
        - Group
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Group.replaceById__post_Groups_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/findOne:
    get:
      tags:
        - Group
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Group.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Group'
      deprecated: false
  /Groups/update:
    post:
      tags:
        - Group
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Group.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Group'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Groups/count:
    get:
      tags:
        - Group
      summary: Count instances of the model matched by where from the data source.
      operationId: Group.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Groups/change-stream:
    post:
      tags:
        - Group
      summary: Create a change stream.
      operationId: Group.createChangeStream__post_Groups_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Group
      summary: Create a change stream.
      operationId: Group.createChangeStream__get_Groups_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/AnswerLists/{id}/member':
    get:
      tags:
        - AnswerList
      summary: Fetches belongsTo relation member.
      operationId: AnswerList.prototype.__get__member
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/AnswerLists/{id}/runningGame':
    get:
      tags:
        - AnswerList
      summary: Fetches belongsTo relation runningGame.
      operationId: AnswerList.prototype.__get__runningGame
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/AnswerLists/{id}/answers/{fk}':
    get:
      tags:
        - AnswerList
      summary: Find a related item by id for answers.
      operationId: AnswerList.prototype.__findById__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    delete:
      tags:
        - AnswerList
      summary: Delete a related item by id for answers.
      operationId: AnswerList.prototype.__destroyById__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - AnswerList
      summary: Update a related item by id for answers.
      operationId: AnswerList.prototype.__updateById__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  '/AnswerLists/{id}/game':
    get:
      tags:
        - AnswerList
      summary: Fetches belongsTo relation game.
      operationId: AnswerList.prototype.__get__game
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/AnswerLists/{id}/answers':
    get:
      tags:
        - AnswerList
      summary: Queries answers of AnswerList.
      operationId: AnswerList.prototype.__get__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
      deprecated: false
    post:
      tags:
        - AnswerList
      summary: Creates a new instance in answers of this model.
      operationId: AnswerList.prototype.__create__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    delete:
      tags:
        - AnswerList
      summary: Deletes all answers of this model.
      operationId: AnswerList.prototype.__delete__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/AnswerLists/{id}/answers/count':
    get:
      tags:
        - AnswerList
      summary: Counts answers of AnswerList.
      operationId: AnswerList.prototype.__count__answers
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AnswerLists:
    post:
      tags:
        - AnswerList
      summary: Create a new instance of the model and persist it into the data source.
      operationId: AnswerList.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    patch:
      tags:
        - AnswerList
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: AnswerList.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    put:
      tags:
        - AnswerList
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AnswerList.replaceOrCreate__put_AnswerLists
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    get:
      tags:
        - AnswerList
      summary: Find all instances of the model matched by filter from the data source.
      operationId: AnswerList.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AnswerList'
      deprecated: false
  /AnswerLists/replaceOrCreate:
    post:
      tags:
        - AnswerList
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: AnswerList.replaceOrCreate__post_AnswerLists_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  /AnswerLists/upsertWithWhere:
    post:
      tags:
        - AnswerList
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: AnswerList.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/AnswerLists/{id}/exists':
    get:
      tags:
        - AnswerList
      summary: Check whether a model instance exists in the data source.
      operationId: 'AnswerList.exists__get_AnswerLists_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/AnswerLists/{id}':
    head:
      tags:
        - AnswerList
      summary: Check whether a model instance exists in the data source.
      operationId: 'AnswerList.exists__head_AnswerLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - AnswerList
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: AnswerList.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    put:
      tags:
        - AnswerList
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AnswerList.replaceById__put_AnswerLists_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - AnswerList
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: AnswerList.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - AnswerList
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: AnswerList.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: AnswerList id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/AnswerLists/{id}/replace':
    post:
      tags:
        - AnswerList
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'AnswerList.replaceById__post_AnswerLists_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  /AnswerLists/findOne:
    get:
      tags:
        - AnswerList
      summary: Find first instance of the model matched by filter from the data source.
      operationId: AnswerList.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  /AnswerLists/update:
    post:
      tags:
        - AnswerList
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: AnswerList.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /AnswerLists/count:
    get:
      tags:
        - AnswerList
      summary: Count instances of the model matched by where from the data source.
      operationId: AnswerList.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /AnswerLists/change-stream:
    post:
      tags:
        - AnswerList
      summary: Create a change stream.
      operationId: AnswerList.createChangeStream__post_AnswerLists_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - AnswerList
      summary: Create a change stream.
      operationId: AnswerList.createChangeStream__get_AnswerLists_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Answers/{id}/answerList':
    get:
      tags:
        - Answer
      summary: Fetches belongsTo relation answerList.
      operationId: Answer.prototype.__get__answerList
      parameters:
        - name: id
          in: path
          description: Answer id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/Answers/{id}/stageItem':
    get:
      tags:
        - Answer
      summary: Fetches belongsTo relation stageItem.
      operationId: Answer.prototype.__get__stageItem
      parameters:
        - name: id
          in: path
          description: Answer id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  /Answers:
    post:
      tags:
        - Answer
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Answer.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    patch:
      tags:
        - Answer
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Answer.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    put:
      tags:
        - Answer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Answer.replaceOrCreate__put_Answers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    get:
      tags:
        - Answer
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Answer.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
      deprecated: false
  /Answers/replaceOrCreate:
    post:
      tags:
        - Answer
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Answer.replaceOrCreate__post_Answers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  /Answers/upsertWithWhere:
    post:
      tags:
        - Answer
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Answer.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  '/Answers/{id}/exists':
    get:
      tags:
        - Answer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Answer.exists__get_Answers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Answers/{id}':
    head:
      tags:
        - Answer
      summary: Check whether a model instance exists in the data source.
      operationId: 'Answer.exists__head_Answers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Answer
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Answer.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    put:
      tags:
        - Answer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Answer.replaceById__put_Answers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    delete:
      tags:
        - Answer
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Answer.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Answer
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Answer.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Answer id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  '/Answers/{id}/replace':
    post:
      tags:
        - Answer
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Answer.replaceById__post_Answers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  /Answers/findOne:
    get:
      tags:
        - Answer
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Answer.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  /Answers/update:
    post:
      tags:
        - Answer
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Answer.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Answers/count:
    get:
      tags:
        - Answer
      summary: Count instances of the model matched by where from the data source.
      operationId: Answer.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Answers/change-stream:
    post:
      tags:
        - Answer
      summary: Create a change stream.
      operationId: Answer.createChangeStream__post_Answers_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Answer
      summary: Create a change stream.
      operationId: Answer.createChangeStream__get_Answers_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Games/{id}/answerLists/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for answerLists.
      operationId: Game.prototype.__findById__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for answerLists.
      operationId: Game.prototype.__destroyById__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for answerLists.
      operationId: Game.prototype.__updateById__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/Games/{id}/runningGames/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for runningGames.
      operationId: Game.prototype.__findById__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for runningGames
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for runningGames.
      operationId: Game.prototype.__destroyById__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for runningGames
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for runningGames.
      operationId: Game.prototype.__updateById__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for runningGames
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/Games/{id}/stages/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for stages.
      operationId: Game.prototype.__findById__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stages
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for stages.
      operationId: Game.prototype.__destroyById__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stages
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for stages.
      operationId: Game.prototype.__updateById__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stages
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  '/Games/{id}/answerLists':
    get:
      tags:
        - Game
      summary: Queries answerLists of Game.
      operationId: Game.prototype.__get__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AnswerList'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in answerLists of this model.
      operationId: Game.prototype.__create__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all answerLists of this model.
      operationId: Game.prototype.__delete__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/answerLists/count':
    get:
      tags:
        - Game
      summary: Counts answerLists of Game.
      operationId: Game.prototype.__count__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/runningGames':
    get:
      tags:
        - Game
      summary: Queries runningGames of Game.
      operationId: Game.prototype.__get__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/RunningGame'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in runningGames of this model.
      operationId: Game.prototype.__create__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/RunningGame'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all runningGames of this model.
      operationId: Game.prototype.__delete__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/runningGames/count':
    get:
      tags:
        - Game
      summary: Counts runningGames of Game.
      operationId: Game.prototype.__count__runningGames
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/stages':
    get:
      tags:
        - Game
      summary: Queries stages of Game.
      operationId: Game.prototype.__get__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stage'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in stages of this model.
      operationId: Game.prototype.__create__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all stages of this model.
      operationId: Game.prototype.__delete__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/stages/count':
    get:
      tags:
        - Game
      summary: Counts stages of Game.
      operationId: Game.prototype.__count__stages
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Games:
    post:
      tags:
        - Game
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Game.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    patch:
      tags:
        - Game
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Game.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    put:
      tags:
        - Game
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Game.replaceOrCreate__put_Games
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    get:
      tags:
        - Game
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Game.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Game'
      deprecated: false
  /Games/replaceOrCreate:
    post:
      tags:
        - Game
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Game.replaceOrCreate__post_Games_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/upsertWithWhere:
    post:
      tags:
        - Game
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Game.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/exists':
    get:
      tags:
        - Game
      summary: Check whether a model instance exists in the data source.
      operationId: 'Game.exists__get_Games_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Games/{id}':
    head:
      tags:
        - Game
      summary: Check whether a model instance exists in the data source.
      operationId: 'Game.exists__head_Games_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Game
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Game.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    put:
      tags:
        - Game
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Game.replaceById__put_Games_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
    delete:
      tags:
        - Game
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Game.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Game
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Game.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/replace':
    post:
      tags:
        - Game
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Game.replaceById__post_Games_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/findOne:
    get:
      tags:
        - Game
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Game.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  /Games/update:
    post:
      tags:
        - Game
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Game.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Game'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Games/count:
    get:
      tags:
        - Game
      summary: Count instances of the model matched by where from the data source.
      operationId: Game.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Games/change-stream:
    post:
      tags:
        - Game
      summary: Create a change stream.
      operationId: Game.createChangeStream__post_Games_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Game
      summary: Create a change stream.
      operationId: Game.createChangeStream__get_Games_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Games/{id}/answerLists/{nk}/member':
    get:
      tags:
        - Game
      summary: Fetches belongsTo relation member.
      operationId: Game.prototype.__get__answerLists__member
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Games/{id}/answerLists/{nk}/runningGame':
    get:
      tags:
        - Game
      summary: Fetches belongsTo relation runningGame.
      operationId: Game.prototype.__get__answerLists__runningGame
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/RunningGame'
      deprecated: false
  '/Games/{id}/answerLists/{nk}/answers/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for answers.
      operationId: Game.prototype.__findById__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for answers.
      operationId: Game.prototype.__destroyById__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for answers.
      operationId: Game.prototype.__updateById__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answers
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
  '/Games/{id}/answerLists/{nk}/game':
    get:
      tags:
        - Game
      summary: Fetches belongsTo relation game.
      operationId: Game.prototype.__get__answerLists__game
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/answerLists/{nk}/answers':
    get:
      tags:
        - Game
      summary: Queries answers of AnswerList.
      operationId: Game.prototype.__get__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Answer'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in answers of this model.
      operationId: Game.prototype.__create__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Answer'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Answer'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all answers of this model.
      operationId: Game.prototype.__delete__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/answerLists/{nk}/answers/count':
    get:
      tags:
        - Game
      summary: Counts answers of AnswerList.
      operationId: Game.prototype.__count__answerLists__answers
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for answerLists.
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/runningGames/{nk}/gameGroups/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for gameGroups.
      operationId: Game.prototype.__findById__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for gameGroups.
      operationId: Game.prototype.__destroyById__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for gameGroups.
      operationId: Game.prototype.__updateById__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for gameGroups
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
  '/Games/{id}/runningGames/{nk}/members/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for members.
      operationId: Game.prototype.__findById__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for members.
      operationId: Game.prototype.__destroyById__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for members.
      operationId: Game.prototype.__updateById__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for members
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
  '/Games/{id}/runningGames/{nk}/answerLists/{fk}':
    get:
      tags:
        - Game
      summary: Find a related item by id for answerLists.
      operationId: Game.prototype.__findById__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Delete a related item by id for answerLists.
      operationId: Game.prototype.__destroyById__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Game
      summary: Update a related item by id for answerLists.
      operationId: Game.prototype.__updateById__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for answerLists
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
  '/Games/{id}/runningGames/{nk}/game':
    get:
      tags:
        - Game
      summary: Fetches belongsTo relation game.
      operationId: Game.prototype.__get__runningGames__game
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Games/{id}/runningGames/{nk}/gameGroups':
    get:
      tags:
        - Game
      summary: Queries gameGroups of RunningGame.
      operationId: Game.prototype.__get__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/GameGroup'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in gameGroups of this model.
      operationId: Game.prototype.__create__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/GameGroup'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/GameGroup'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all gameGroups of this model.
      operationId: Game.prototype.__delete__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/runningGames/{nk}/gameGroups/count':
    get:
      tags:
        - Game
      summary: Counts gameGroups of RunningGame.
      operationId: Game.prototype.__count__runningGames__gameGroups
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/runningGames/{nk}/members':
    get:
      tags:
        - Game
      summary: Queries members of RunningGame.
      operationId: Game.prototype.__get__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Member'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in members of this model.
      operationId: Game.prototype.__create__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/Member'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Member'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all members of this model.
      operationId: Game.prototype.__delete__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/runningGames/{nk}/members/count':
    get:
      tags:
        - Game
      summary: Counts members of RunningGame.
      operationId: Game.prototype.__count__runningGames__members
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/runningGames/{nk}/answerLists':
    get:
      tags:
        - Game
      summary: Queries answerLists of RunningGame.
      operationId: Game.prototype.__get__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/AnswerList'
      deprecated: false
    post:
      tags:
        - Game
      summary: Creates a new instance in answerLists of this model.
      operationId: Game.prototype.__create__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/AnswerList'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/AnswerList'
      deprecated: false
    delete:
      tags:
        - Game
      summary: Deletes all answerLists of this model.
      operationId: Game.prototype.__delete__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Games/{id}/runningGames/{nk}/answerLists/count':
    get:
      tags:
        - Game
      summary: Counts answerLists of RunningGame.
      operationId: Game.prototype.__count__runningGames__answerLists
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for runningGames.
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/Games/{id}/stages/{nk}/game':
    get:
      tags:
        - Game
      summary: Fetches belongsTo relation game.
      operationId: Game.prototype.__get__stages__game
      parameters:
        - name: id
          in: path
          description: Game id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for stages.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Stages/{id}/game':
    get:
      tags:
        - Stage
      summary: Fetches belongsTo relation game.
      operationId: Stage.prototype.__get__game
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/Stages/{id}/stageItems/{fk}':
    get:
      tags:
        - Stage
      summary: Find a related item by id for stageItems.
      operationId: Stage.prototype.__findById__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    delete:
      tags:
        - Stage
      summary: Delete a related item by id for stageItems.
      operationId: Stage.prototype.__destroyById__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - Stage
      summary: Update a related item by id for stageItems.
      operationId: Stage.prototype.__updateById__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  '/Stages/{id}/stageItems':
    get:
      tags:
        - Stage
      summary: Queries stageItems of Stage.
      operationId: Stage.prototype.__get__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StageItem'
      deprecated: false
    post:
      tags:
        - Stage
      summary: Creates a new instance in stageItems of this model.
      operationId: Stage.prototype.__create__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    delete:
      tags:
        - Stage
      summary: Deletes all stageItems of this model.
      operationId: Stage.prototype.__delete__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/Stages/{id}/stageItems/count':
    get:
      tags:
        - Stage
      summary: Counts stageItems of Stage.
      operationId: Stage.prototype.__count__stageItems
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Stages:
    post:
      tags:
        - Stage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: Stage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    patch:
      tags:
        - Stage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: Stage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    put:
      tags:
        - Stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Stage.replaceOrCreate__put_Stages
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    get:
      tags:
        - Stage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: Stage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/Stage'
      deprecated: false
  /Stages/replaceOrCreate:
    post:
      tags:
        - Stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: Stage.replaceOrCreate__post_Stages_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  /Stages/upsertWithWhere:
    post:
      tags:
        - Stage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: Stage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  '/Stages/{id}/exists':
    get:
      tags:
        - Stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stage.exists__get_Stages_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/Stages/{id}':
    head:
      tags:
        - Stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'Stage.exists__head_Stages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - Stage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: Stage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    put:
      tags:
        - Stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Stage.replaceById__put_Stages_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
    delete:
      tags:
        - Stage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: Stage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - Stage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: Stage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  '/Stages/{id}/replace':
    post:
      tags:
        - Stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'Stage.replaceById__post_Stages_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  /Stages/findOne:
    get:
      tags:
        - Stage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: Stage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  /Stages/update:
    post:
      tags:
        - Stage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: Stage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/Stage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /Stages/count:
    get:
      tags:
        - Stage
      summary: Count instances of the model matched by where from the data source.
      operationId: Stage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /Stages/change-stream:
    post:
      tags:
        - Stage
      summary: Create a change stream.
      operationId: Stage.createChangeStream__post_Stages_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - Stage
      summary: Create a change stream.
      operationId: Stage.createChangeStream__get_Stages_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/Stages/{id}/stageItems/{nk}/stage':
    get:
      tags:
        - Stage
      summary: Fetches belongsTo relation stage.
      operationId: Stage.prototype.__get__stageItems__stage
      parameters:
        - name: id
          in: path
          description: Stage id
          required: true
          type: string
          format: JSON
        - name: nk
          in: path
          description: Foreign key for stageItems.
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  '/StageItems/{id}/stage':
    get:
      tags:
        - StageItem
      summary: Fetches belongsTo relation stage.
      operationId: StageItem.prototype.__get__stage
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Stage'
      deprecated: false
  '/StageItems/{id}/dataQuery':
    get:
      tags:
        - StageItem
      summary: Fetches hasOne relation dataQuery.
      operationId: StageItem.prototype.__get__dataQuery
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    post:
      tags:
        - StageItem
      summary: Creates a new instance in dataQuery of this model.
      operationId: StageItem.prototype.__create__dataQuery
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    put:
      tags:
        - StageItem
      summary: Update dataQuery of this model.
      operationId: StageItem.prototype.__update__dataQuery
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    delete:
      tags:
        - StageItem
      summary: Deletes dataQuery of this model.
      operationId: StageItem.prototype.__destroy__dataQuery
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /StageItems:
    post:
      tags:
        - StageItem
      summary: Create a new instance of the model and persist it into the data source.
      operationId: StageItem.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    patch:
      tags:
        - StageItem
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: StageItem.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    put:
      tags:
        - StageItem
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: StageItem.replaceOrCreate__put_StageItems
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    get:
      tags:
        - StageItem
      summary: Find all instances of the model matched by filter from the data source.
      operationId: StageItem.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StageItem'
      deprecated: false
  /StageItems/replaceOrCreate:
    post:
      tags:
        - StageItem
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: StageItem.replaceOrCreate__post_StageItems_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  /StageItems/upsertWithWhere:
    post:
      tags:
        - StageItem
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: StageItem.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  '/StageItems/{id}/exists':
    get:
      tags:
        - StageItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'StageItem.exists__get_StageItems_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/StageItems/{id}':
    head:
      tags:
        - StageItem
      summary: Check whether a model instance exists in the data source.
      operationId: 'StageItem.exists__head_StageItems_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - StageItem
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: StageItem.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    put:
      tags:
        - StageItem
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'StageItem.replaceById__put_StageItems_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    delete:
      tags:
        - StageItem
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: StageItem.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - StageItem
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: StageItem.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  '/StageItems/{id}/replace':
    post:
      tags:
        - StageItem
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'StageItem.replaceById__post_StageItems_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  /StageItems/findOne:
    get:
      tags:
        - StageItem
      summary: Find first instance of the model matched by filter from the data source.
      operationId: StageItem.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  /StageItems/update:
    post:
      tags:
        - StageItem
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: StageItem.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /StageItems/count:
    get:
      tags:
        - StageItem
      summary: Count instances of the model matched by where from the data source.
      operationId: StageItem.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /StageItems/change-stream:
    post:
      tags:
        - StageItem
      summary: Create a change stream.
      operationId: StageItem.createChangeStream__post_StageItems_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - StageItem
      summary: Create a change stream.
      operationId: StageItem.createChangeStream__get_StageItems_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/StageItems/{id}/stage/game':
    get:
      tags:
        - StageItem
      summary: Fetches belongsTo relation game.
      operationId: StageItem.prototype.__get__stage__game
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/Game'
      deprecated: false
  '/StageItems/{id}/stage/stageItems/{fk}':
    get:
      tags:
        - StageItem
      summary: Find a related item by id for stageItems.
      operationId: StageItem.prototype.__findById__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    delete:
      tags:
        - StageItem
      summary: Delete a related item by id for stageItems.
      operationId: StageItem.prototype.__destroyById__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - StageItem
      summary: Update a related item by id for stageItems.
      operationId: StageItem.prototype.__updateById__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for stageItems
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  '/StageItems/{id}/stage/stageItems':
    get:
      tags:
        - StageItem
      summary: Queries stageItems of Stage.
      operationId: StageItem.prototype.__get__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/StageItem'
      deprecated: false
    post:
      tags:
        - StageItem
      summary: Creates a new instance in stageItems of this model.
      operationId: StageItem.prototype.__create__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/StageItem'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
    delete:
      tags:
        - StageItem
      summary: Deletes all stageItems of this model.
      operationId: StageItem.prototype.__delete__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/StageItems/{id}/stage/stageItems/count':
    get:
      tags:
        - StageItem
      summary: Counts stageItems of Stage.
      operationId: StageItem.prototype.__count__stage__stageItems
      parameters:
        - name: id
          in: path
          description: StageItem id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/DataQueries/{id}/stageItem':
    get:
      tags:
        - DataQuery
      summary: Fetches belongsTo relation stageItem.
      operationId: DataQuery.prototype.__get__stageItem
      parameters:
        - name: id
          in: path
          description: DataQuery id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/StageItem'
      deprecated: false
  /DataQueries:
    post:
      tags:
        - DataQuery
      summary: Create a new instance of the model and persist it into the data source.
      operationId: DataQuery.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    patch:
      tags:
        - DataQuery
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: DataQuery.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    put:
      tags:
        - DataQuery
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: DataQuery.replaceOrCreate__put_DataQueries
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    get:
      tags:
        - DataQuery
      summary: Find all instances of the model matched by filter from the data source.
      operationId: DataQuery.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/DataQuery'
      deprecated: false
  /DataQueries/replaceOrCreate:
    post:
      tags:
        - DataQuery
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: DataQuery.replaceOrCreate__post_DataQueries_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
  /DataQueries/upsertWithWhere:
    post:
      tags:
        - DataQuery
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: DataQuery.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
  '/DataQueries/{id}/exists':
    get:
      tags:
        - DataQuery
      summary: Check whether a model instance exists in the data source.
      operationId: 'DataQuery.exists__get_DataQueries_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/DataQueries/{id}':
    head:
      tags:
        - DataQuery
      summary: Check whether a model instance exists in the data source.
      operationId: 'DataQuery.exists__head_DataQueries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - DataQuery
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: DataQuery.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    put:
      tags:
        - DataQuery
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'DataQuery.replaceById__put_DataQueries_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
    delete:
      tags:
        - DataQuery
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: DataQuery.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - DataQuery
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: DataQuery.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: DataQuery id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
  '/DataQueries/{id}/replace':
    post:
      tags:
        - DataQuery
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'DataQuery.replaceById__post_DataQueries_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
  /DataQueries/findOne:
    get:
      tags:
        - DataQuery
      summary: Find first instance of the model matched by filter from the data source.
      operationId: DataQuery.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/DataQuery'
      deprecated: false
  /DataQueries/update:
    post:
      tags:
        - DataQuery
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: DataQuery.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/DataQuery'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /DataQueries/count:
    get:
      tags:
        - DataQuery
      summary: Count instances of the model matched by where from the data source.
      operationId: DataQuery.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /DataQueries/change-stream:
    post:
      tags:
        - DataQuery
      summary: Create a change stream.
      operationId: DataQuery.createChangeStream__post_DataQueries_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - DataQuery
      summary: Create a change stream.
      operationId: DataQuery.createChangeStream__get_DataQueries_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
tags:
  - name: User
  - name: RunningGame
  - name: GameGroup
  - name: Member
  - name: Group
  - name: AnswerList
  - name: Answer
  - name: Game
  - name: Stage
  - name: StageItem
  - name: DataQuery
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  x-any:
    properties: {}
  AccessToken:
    properties:
      id:
        type: string
      ttl:
        default: 1209600
        description: time to live in seconds (2 weeks by default)
        type: number
        format: double
      scopes:
        description: Array of scopes granted to this access token.
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
      userId:
        type: number
        format: double
    required:
      - id
    additionalProperties: false
  User:
    properties:
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  GameGroup:
    properties:
      isDone:
        type: boolean
      id:
        type: number
        format: double
      runningGameId:
        type: number
        format: double
    additionalProperties: false
  Member:
    properties:
      birthDay:
        type: string
        format: date-time
      gender:
        type: number
        format: double
      isGroupAdmin:
        type: boolean
      realm:
        type: string
      username:
        type: string
      email:
        type: string
      emailVerified:
        type: boolean
      id:
        type: number
        format: double
      runningGameId:
        type: number
        format: double
      gameGroupId:
        type: number
        format: double
      groupId:
        type: number
        format: double
    required:
      - email
    additionalProperties: false
  AnswerList:
    properties:
      dateStarted:
        type: string
        format: date-time
      id:
        type: number
        format: double
      memberId:
        type: number
        format: double
      runningGameId:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - dateStarted
    additionalProperties: false
  Game:
    properties:
      title:
        type: string
      text:
        type: string
      startButtonText:
        default: Start
        type: string
      startButtonIcon:
        type: string
      id:
        type: number
        format: double
    required:
      - title
    additionalProperties: false
  Stage:
    properties:
      order:
        default: 0
        type: number
        format: double
      title:
        type: string
      type:
        type: string
      nextButtonText:
        default: Volgende
        type: string
      nextButtonIcon:
        default: Volgende
        type: string
      backgroundColor:
        type: string
      textColor:
        type: string
      id:
        type: number
        format: double
      gameId:
        type: number
        format: double
      runningGameId:
        type: number
        format: double
    required:
      - order
      - type
    additionalProperties: false
  RunningGame:
    properties:
      isRunning:
        type: boolean
      startTime:
        type: string
        format: date-time
      currentStageStartTime:
        type: string
        format: date-time
      currentStage:
        type: number
        format: double
      currentStageType:
        type: string
      id:
        type: number
        format: double
      groupId:
        type: number
        format: double
      gameId:
        type: number
        format: double
    required:
      - isRunning
      - startTime
      - currentStageStartTime
    additionalProperties: false
  Group:
    properties:
      klasType:
        type: string
      klasNaam:
        type: string
      klasNummer:
        type: number
        format: double
      plaatsNaam:
        type: string
      geoCoord:
        $ref: '#/definitions/GeoPoint'
      id:
        type: number
        format: double
      memberId:
        type: number
        format: double
      adminId:
        type: number
        format: double
    required:
      - klasType
      - klasNaam
      - klasNummer
    additionalProperties: false
  Answer:
    properties:
      itemType:
        type: string
      text:
        type: string
      number:
        type: number
        format: double
      boolean:
        type: boolean
      object:
        type: object
      id:
        type: number
        format: double
      answerListId:
        type: number
        format: double
      stageItemId:
        type: number
        format: double
    additionalProperties: false
  StageItem:
    properties:
      stageType:
        type: string
      itemType:
        type: string
      order:
        type: number
        format: double
      inputName:
        type: string
      text:
        type: string
      iconLeft:
        type: string
      iconRight:
        type: string
      url:
        type: string
      autoplay:
        type: string
      placeholder:
        type: string
      rows:
        type: string
      min:
        default: 1
        type: number
        format: double
      max:
        default: 10
        type: number
        format: double
      step:
        default: 1
        type: number
        format: double
      minText:
        type: string
      maxText:
        type: string
      emptyValidationText:
        type: string
      rangeValidationText:
        type: string
      selectItems:
        type: object
      extraData:
        type: object
      chartConfig:
        type: object
      styles:
        type: string
      id:
        type: number
        format: double
      stageId:
        type: number
        format: double
    required:
      - itemType
      - order
    additionalProperties: false
  DataQuery:
    properties:
      queryObject:
        type: object
      name:
        type: string
      description:
        type: string
      id:
        type: number
        format: double
      stageItemId:
        type: number
        format: double
    required:
      - queryObject
      - name
    additionalProperties: false
  GeoPoint:
    properties:
      lat:
        type: number
      lng:
        type: number
